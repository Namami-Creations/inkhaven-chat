openapi: 3.0.3
info:
  title: Inkhaven Chat API
  description: REST API for the Inkhaven Chat platform
  version: 2.0.0
  contact:
    name: Inkhaven Chat Support
    email: support@inkhaven.chat
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.inkhaven.chat
    description: Production server
  - url: http://localhost:3000
    description: Development server

security:
  - bearerAuth: []

paths:
  /api/auth/login:
    post:
      summary: User login
      description: Authenticate a user and return access tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/register:
    post:
      summary: User registration
      description: Register a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 20
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "securepassword123"
                displayName:
                  type: string
                  maxLength: 50
                  example: "John Doe"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/chat/rooms:
    get:
      summary: Get chat rooms
      description: Retrieve a list of available chat rooms
      tags:
        - Chat
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  total:
                    type: integer
                    example: 150
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create chat room
      description: Create a new chat room
      tags:
        - Chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "General Discussion"
                description:
                  type: string
                  maxLength: 500
                  example: "A place for general conversations"
                isPrivate:
                  type: boolean
                  default: false
                  example: false
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  room:
                    $ref: '#/components/schemas/Room'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/chat/messages:
    get:
      summary: Get messages
      description: Retrieve messages from a chat room
      tags:
        - Chat
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: before
          in: query
          schema:
            type: string
            format: date-time
            description: Get messages before this timestamp
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  hasMore:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Send message
      description: Send a message to a chat room
      tags:
        - Chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roomId
                - content
              properties:
                roomId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
                content:
                  type: string
                  minLength: 1
                  maxLength: 2000
                  example: "Hello, everyone!"
                messageType:
                  type: string
                  enum: [text, image, file]
                  default: text
                  example: "text"
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        displayName:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "Software developer passionate about AI"
        interests:
          type: array
          items:
            type: string
          example: ["AI", "programming", "gaming"]
        createdAt:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"

    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440001"
        name:
          type: string
          example: "General Discussion"
        description:
          type: string
          example: "A place for general conversations"
        isPrivate:
          type: boolean
          example: false
        createdBy:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"
        memberCount:
          type: integer
          example: 42

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440002"
        roomId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440001"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        content:
          type: string
          example: "Hello, everyone!"
        messageType:
          type: string
          enum: [text, image, file]
          example: "text"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-15T10:35:00Z"
        user:
          $ref: '#/components/schemas/User'

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation failed"
              details:
                type: object
                description: "Validation error details"
                example: {
                  "email": ["Invalid email format"],
                  "password": ["Password must be at least 8 characters"]
                }

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Invalid or missing authentication token"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "You don't have permission to access this resource"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
              message:
                type: string
                example: "The requested resource was not found"

    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Too Many Requests"
              message:
                type: string
                example: "Rate limit exceeded. Please try again later."
              retryAfter:
                type: integer
                description: "Seconds to wait before retrying"
                example: 60

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
                example: "An unexpected error occurred. Please try again later."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from login/registration"
